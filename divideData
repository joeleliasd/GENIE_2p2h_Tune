#include <TFile.h>
#include <TTree.h>
#include <TEventList.h>
#include <TH2D.h>
#include <TStyle.h>
#include <iostream>

void divideData() {
    gStyle->SetOptStat(0);
    gStyle->SetPalette(87);

//The purpose of this script is to find values of the xAxis and yAxis variable that create histograms of equal number of events, effectively dividing the data into equal parts

        //Data division dimensions
        //Columns corresponds to the x axis variable
        int columns = 3;
        //Rows corresponds to the y axis variable
        int rows = 3;

        //choosing the variable on the x axis for data divisions
        TString xAxis = "pfrac_proton";
        //min and max values for x axis variable
        double absoluteMaxX = 1.0;
        double absoluteMinX = 0.0;

        //choosing the variable on the y axis for data divisions
        TString yAxis = "q0/q3";
        //min and max values for y axis variable
        double absoluteMaxY = 1.0;
        double absoluteMinY = 0.0;

        //Histogram variables
        TString histXaxis = "dalphat";
        TString histYaxis = "dphit";
        //Histogram bins
        int histXbins = 14;
        int histYbins = 36;

        // Open the file and get the TTree
        TFile *file = TFile::Open("flat_GENIE_G18_10a_02_11a_50M.root");
        TTree *tree = (TTree*)file->Get("FlatTree_VARS");

        // Selection criteria
        TString baseCriteria = "flagCC0piMINERvA_STV && Mode==2 && pfrac_proton>-999";

    //initial increment for x axis
    double initialIncrementX = (absoluteMaxX * .5);

    //initial increment for y axis
    double initialIncrementY = (absoluteMaxY * .5);

    // Count the total number of events with the selection criteria
    tree->Draw(">>baseEventList", baseCriteria);
    TEventList *baseEventList = (TEventList*)gDirectory->Get("baseEventList");
    Long64_t totalEvents = baseEventList->GetN();

    // Calculate the events per column and division
    Long64_t eventsPerColumn = totalEvents / columns;
    Long64_t eventsPerDivision = totalEvents / (columns * rows);

    double minX = 0.0; // minimum considered
    double incrementX = initialIncrementX; // increment
    
    // Create an output file to store all histograms
    TFile *outputFile = new TFile("dataDivisions.root", "RECREATE");
    
    // Loop through each column of divisions
    for (int i = 0; i < columns; i++) {
        incrementX = initialIncrementX; // Reset increment
        double maxX = absoluteMaxX; // Initialize to maximum possible value
        double currentX;

        Long64_t eventCount = 0;
        for (currentX = minX + incrementX; currentX <= (absoluteMaxX + incrementX); currentX += incrementX) {

            TString criteria = baseCriteria + Form(" && %s>=%f && %s<%f", xAxis.Data(), minX, xAxis.Data(), currentX);
            tree->Draw(">>eventList", criteria);
            TEventList *eventList = (TEventList*)gDirectory->Get("eventList");
            eventCount = eventList->GetN();

            if (i == (columns - 1)) {
                maxX = absoluteMaxX;
                break;
            }

            if (eventCount >= eventsPerColumn) {
                if (incrementX >= (initialIncrementX * pow(.5, 4))) {
                    currentX -= incrementX;  // Go back one step
                    incrementX = (incrementX * .5);  // Switch to finer increment
                } else {
                    maxX = currentX;
                    break;
                }
            }
	}

	TString criteriaX = baseCriteria + Form(" && %s>=%f && %s<%f", xAxis.Data(), minX, xAxis.Data(), maxX);

        double minY = 0.0; // minimum y value considered
        double currentY;
        double incrementY = initialIncrementY; // increment for y axis

        // Loop through each column division within the current column, divided according to the y axis variable
        for (int j = 0; j < rows; j++) {
            double maxY = absoluteMaxY; // Initialize to maximum possible value
            incrementY = initialIncrementY; // Reset increment

            Long64_t yeventCount = 0;
            for (currentY = minY + incrementY; currentY <= (absoluteMaxY + incrementY); currentY += incrementY) {
                TString criteria = criteriaX + Form(" && %s>=%f && %s<%f", yAxis.Data(), minY, yAxis.Data(), currentY);
                tree->Draw(">>yEventList", criteria);
                TEventList *yEventList = (TEventList*)gDirectory->Get("yEventList");
                yeventCount = yEventList->GetN();

                if (j == (rows - 1)) {
                    maxY = absoluteMaxY;
                    break;
                }

                if (yeventCount >= eventsPerDivision) {
                    if (incrementY >= (initialIncrementY * pow(.5, 4))) {
                        currentY -= incrementY;  // Go back one step
                        incrementY = (incrementY * .5);  // Switch to finer increment
                    } else {
                        maxY = currentY;
                        break;
                    }
                }
            }

            // Criteria for current division
            TString criteriaFinal = criteriaX + Form(" && %s>=%f && %s<%f", yAxis.Data(), minY, yAxis.Data(), maxY);

            // Create histograms for this division and save to the ROOT file
            TString histName = Form("h_%s_%s_2p2h_Div%dnew", histXaxis.Data(), histYaxis.Data(), (rows*i) + j + 1);
            TH2D *hist = new TH2D(histName, Form("%s>=%f && %s<%f && %s>=%f && %s<%f", xAxis.Data(), minX, xAxis.Data(), maxX, yAxis.Data(), minY, yAxis.Data(), maxY), histYbins, absoluteMinX, absoluteMaxX, $
            tree->Draw((std::string(histXaxis) + ":" + std::string(histYaxis) + " >> " + std::string(hist->GetName())).c_str(), Form("fScaleFactor * (%s)", criteriaFinal.Data()), "colz");
            gStyle->SetPalette(87);
            hist->Write();

            // Set the new yaxis values for the next iteration
            minY = maxY;
        }
	minX = maxX;
        // Set the new xaxis values for the next iteration
    }

    // Close the output file
    outputFile->Close();

    // Close the input file
    file->Close();
}

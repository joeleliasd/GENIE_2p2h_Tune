//Author: Nate Santiago July 2023

void initial_state_branchmaker() {

  TFile *file = new TFile("flat_GENIE_G18_10a_02_11a_50M.root","update");

  TTree *tree = (TTree*)file->Get("FlatTree_VARS");

  int nentries = tree->GetEntries();

  const int nmax = 100;
  bool flagCC0piMINERvA_STV;
  float px[nmax];
  float py[nmax];
  float pz[nmax];
  int pdg[nmax];
  int Mode;
  int nfsp;
  float dphit;
  float dalphat;
  float IState;

  tree->SetBranchStatus("flagCC0piMINERvA_STV", true);
  tree->SetBranchAddress("flagCC0piMINERvA_STV", &flagCC0piMINERvA_STV);
  tree->SetBranchStatus("px", true);
  tree->SetBranchAddress("px", &px);
  tree->SetBranchStatus("py", true);
  tree->SetBranchAddress("py", &py);
  tree->SetBranchStatus("pz", true);
  tree->SetBranchAddress("pz", &pz);
  tree->SetBranchStatus("pdg", true);
  tree->SetBranchAddress("pdg", &pdg);
  tree->SetBranchStatus("Mode", true);
  tree->SetBranchAddress("Mode", &Mode);
  tree->SetBranchStatus("nfsp", true);
  tree->SetBranchAddress("nfsp", &nfsp);
  tree->SetBranchStatus("fScaleFactor",true);
  double scale = tree->GetMaximum("fScaleFactor");

  TBranch*bIState = tree->Branch("IState",&IState,"IState/F");


  for (int i = 0; i < nentries; ++i) { //Loop events ->Fill should be inside this for loop
    tree->GetEntry(i);

    int cindex = 0;
    int pIndex = 0;
    int nIndex = 0;
    int mIndex = 0;
    int nProtons = 0;
    int nNeutrons = 0;
    int nMuons = 0;
    float pmag = 0;
    float vectordiff = 0;
    vector<int> pIndexList;
    vector<double> pmomentumList;

    if (i % (nentries/5) == 0) std::cout << i << "/" << nentries << " (" << (double(i)/nentries)*100 << "%)" << std::endl;

    for (int j=0; j <nfsp; ++j){ //begin nfsp loop (number final state particles)

      if (pdg[j]==2212) {//if proton
        double p_p = sqrt(px[j]*px[j]+py[j]*py[j]+pz[j]*pz[j]);
        pIndex = j;
        nProtons++;
        pIndexList.push_back(j);
        pmomentumList.push_back(p_p);

      } else if (pdg[j]==2112) { //if Neutron
        nIndex = j;
        nNeutrons++;

      } else if (pdg[j]==13) {//if Muon
        mIndex = j;
        nMuons++;//increase muon count only if it passes the cuts
      } else{
               continue;
      }
    }//end nsfp loop
    //}
    if (nNeutrons==1 && nProtons!=0 && nMuons==1){
      IState=1;
    } else if (nProtons>1 && nNeutrons==0 && nMuons==1) {
      IState=2;
    } else{
      IState=-999;
    }
    bIState->Fill();

  }//end event loop
     file->Write();
}
